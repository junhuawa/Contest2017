#   make  - make all the UT cases, and run it by valgrind
#   make gcov - Need set USE_GCOV to Y, create UT coverage html report in html
#   			directory
#   make clean  - removes all files generated by make.

GTEST_DIR = ../googletest

# Where to find user code.
USER_SRC_DIR = ../../src
USER_INC_DIR = ../../include
CASE_DIR = ../cases

GCOV_PREFIX = .

# Use gcov, off by default
USE_GCOV = Y

ifndef USE_GCOV
	USE_GCOV = N
endif

CPPFLAGS += -isystem $(GTEST_DIR)/include 

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -D__UT__ -I$(USER_INC_DIR) -Wno-write-strings
ifeq ($(USE_GCOV), Y)
	CXXFLAGS += -fprofile-arcs -ftest-coverage -lgcov
endif

TESTS = unittest

GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h \
                ../../include/*.h

# House-keeping build targets.
all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o *.json
	rm -rf html *.gcda *.gcno 
	rm -rf app.info

GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

#question1.o : $(USER_SRC_DIR)/question1.c $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_SRC_DIR)/question1.c
#
#question2.o : $(USER_SRC_DIR)/question2.c $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_SRC_DIR)/question2.c

#question3.o : $(USER_SRC_DIR)/question3.c $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_SRC_DIR)/question3.c

question4.o : $(USER_SRC_DIR)/question4.cpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_SRC_DIR)/question4.cpp

#question5.o : $(USER_SRC_DIR)/question5.c $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_SRC_DIR)/question5.c


#Question1Unittest.o : $(CASE_DIR)/Question1Unittest.cpp \
#					  $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(CASE_DIR)/Question1Unittest.cpp
#
#Question2Unittest.o : $(CASE_DIR)/Question2Unittest.cpp \
#					  $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(CASE_DIR)/Question2Unittest.cpp

#Question3Unittest.o : $(CASE_DIR)/Question3Unittest.cpp \
#					  $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(CASE_DIR)/Question3Unittest.cpp

Question4Unittest.o : $(CASE_DIR)/Question4Unittest.cpp \
					  $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(CASE_DIR)/Question4Unittest.cpp

#Question5Unittest.o : $(CASE_DIR)/Question5Unittest.cpp \
#					  $(GTEST_HEADERS)
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(CASE_DIR)/Question5Unittest.cpp

unittest : question4.o \
	Question4Unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -D__UT__
	./unittest

#unittest : question5.o question4.o question3.o question2.o question1.o \
#	Question5Unittest.o Question4Unittest.o Question3Unittest.o Question2Unittest.o Question1Unittest.o gtest_main.a
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@ -D__UT__
#	./unittest
#valgrind ./unittest

gcov: $(TESTS)
	lcov --directory $(GCOV_PREFIX) --capture --output-file $(GCOV_PREFIX)/app.info
	mkdir -p html
	genhtml --output-directory $(PWD)/html $(GCOV_PREFIX)/app.info
